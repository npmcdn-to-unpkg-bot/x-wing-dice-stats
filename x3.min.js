"use strict";function getRandomInt(t,e){return Math.floor(Math.random()*(e-t))+t}function roll(t){const e=getRandomInt(0,8);return t[e]}function rollRed(){return roll(redDie)}function rollGreen(){return roll(greenDie)}function BlankResult(){this.totalHits=0,this.hits=0,this.crits=0,this.attackFocuses=0,this.attackBlanks=0,this.evades=0,this.defendFocuses=0,this.defendBlanks=0}function createBlankHits(t){return new Array(t+1).fill(0)}function rollDice(t,e,s,a,n){for(var r=createBlankHits(t),o=0;o<n;o++){for(var i=new BlankResult,c=0;c<t;c++)i.addAttackResult(rollRed());i.applyAttackMods(s);for(var l=0;l<e;l++)i.addDefenseResult(rollGreen());i.applyDefenseMods(a);var u=i.totalHits-i.evades;u=Math.max(u,0),r[u]++}return R.map(function(t){return t/n*100},r)}const redDie=["BLANK","BLANK","HIT","HIT","HIT","CRIT","FOCUS","FOCUS"],greenDie=["BLANK","BLANK","BLANK","EVADE","EVADE","EVADE","FOCUS","FOCUS"];BlankResult.prototype.addAttackResult=function(t){switch(t){case"BLANK":this.attackBlanks++;break;case"HIT":this.hits++,this.totalHits++;break;case"CRIT":this.crits++,this.totalHits++;break;case"FOCUS":this.attackFocuses++;break;default:throw new Error("Unsupported dice result")}},BlankResult.prototype.addDefenseResult=function(t){switch(t){case"BLANK":this.defendBlanks++;break;case"EVADE":this.evades++;break;case"FOCUS":this.defendFocuses++;break;default:throw new Error("Unsupported dice result")}},BlankResult.prototype.applyAttackMods=function(t){if(t.focus&&(this.hits+=this.attackFocuses,this.totalHits+=this.attackFocuses,this.attackFocuses=0),t.targetLock){const e=this.attackBlanks+this.attackFocuses;this.attackBlanks=0,this.attackFocuses=0;for(var s=0;s<e;s++)this.addAttackResult(rollRed())}},BlankResult.prototype.applyDefenseMods=function(t){t.focus&&(this.evades+=this.defendFocuses),t.evade&&this.evades++};
